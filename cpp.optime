author=Firmin Martin
title=<<C++ for C Programmer>> Notes
debug=debug
columns=2

s:Week 1

cc:From C to C++
*C*                                & *C++*
@code[c](#include <stdio.h>)       & @code[cpp](#include <cstdio>)
                                   & @code[cpp](using namespace std)
@code[c](#define PI 3.14)          & @code[cpp](const float PI = 3.14)
@code[c](#define max(a,b) (...)) & @code[cpp](inline max(a, b) {...})

c:Simple I/O functions
@code[cpp](cout << "Print something" << endl)
@code[cpp](cin  >> input)

cc:Cast
*static cast* : (_safe cast_) Convert if there is a rule based conversion, otherwise error & @code[cpp](static_cast<double> 5/4)
*reinterpret cast* :  & 
*dynamic cast* :  used with object & 
*const cast* : cast away const-ness & 

c:Function call
Call by value
Call by pointer
*Call by reference*
> @l[An Introduction to Reference](https://www.embedded.com/electronics-blogs/programming-pointers/4024641/An-Introduction-to-References)

code:c++:Overload
inline void swap(int &i, int &j) {
    int tmp = i
    i = j
    j = tmp
}
 
inline void swap(double &i, double &j) {
    double tmp = i
    i = j
    j = tmp
}



code:c++:Generic
template<class T>
inline void swap(T &i, T &j) {
    T tmp = i
    i = j
    j = tmp
}

s:Week 2

c:Function default parameter
`T sum (T arr[], int count, T @c[red](s = 0))`

code:c++:Multiple template arguments
template <class T1, class T2>
void copy (const T1 src[], T2 dest[], int size) {
 
    for (int i = 0; i < size; ++i) {
        dest[i] = static_cast<T2>(src[i]);
    }
 
}

code:c++:Enumerate type
typedef enum {MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY} days;

code:c++:Operator overloading
inline days operator++ (days d) {
    return static_cast<days>((static_cast<int>(d) + 1) % 7);
}
